var e=Object.create,t=Object.defineProperty,r=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,o=Object.getPrototypeOf,a=Object.prototype.hasOwnProperty,u=e=>t(e,"__esModule",{value:!0}),i=i=>((e,o,u)=>{if(o&&"object"==typeof o||"function"==typeof o)for(let i of s(o))a.call(e,i)||"default"===i||t(e,i,{get:()=>o[i],enumerable:!(u=r(o,i))||u.enumerable});return e})(u(t(null!=i?e(o(i)):{},"default",i&&i.__esModule&&"default"in i?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i);((e,r)=>{for(var s in u(e),r)t(e,s,{get:r[s],enumerable:!0})})(exports,{default:()=>d});var n=i(require("./o4.js")),l=i(require("./is.js")),c=i(require("./kw.js")),p=i(require("./ob.js")),g=i(require("./fi.js")),y=["grocery_c_front_test_scene"],d=class extends c.default{constructor(e,t){super(e,t),this.resetUserInfo=e=>{this.userInfo.userId=e.userId},this.requestABStrategy=e=>{return t=this,r=null,s=function*(){var t,r,s,o,a;try{const o=[],a={sceneKey:e,uuid:this.userInfo.uuid,userId:this.userInfo.userId,extendParam:o},u=yield(0,g.getAbStrategyNew)(a);return null==(t=p.log)||t.info("<abTest>ab模块请求成功：",u),null==(r=this.app)||r.$cat.reportCustomMetrics(l.YXReportTarget.AB_MODULES_LOAD,1),Promise.resolve(null==(s=null==u?void 0:u.data)?void 0:s.expList)}catch(e){return null==(o=p.log)||o.info("<abTest>ab模块请求失败：",e),null==(a=this.app)||a.$cat.reportCustomMetrics(l.YXReportTarget.AB_MODULES_LOAD,0,{reason:e.message}),Promise.resolve([])}},new Promise(((e,o)=>{var a=e=>{try{i(s.next(e))}catch(e){o(e)}},u=e=>{try{i(s.throw(e))}catch(e){o(e)}},i=t=>t.done?e(t.value):Promise.resolve(t.value).then(a,u);i((s=s.apply(t,r)).next())}));var t,r,s},this.reportTargetToCat=(e,t,r)=>{const{$cat:s}=this.app;return s.reportCustomMetrics(e,t,{msg:r}),Promise.resolve()},this.codeLogError=(e,t,r)=>{p.log.warn(e,t,r)},this.getUserInfo=()=>({userId:this.userInfo.userId,uuid:this.userInfo.uuid}),this.isGrey=(e,t)=>{const r=this.sceneList[0];return n.ABTestUtil.getGrayStrategy(r,e,t)},this.getGrayStrategyVal=e=>{const t=this.sceneList[0];return n.ABTestUtil.getGroupStrategy(t,e).expKey},this.destory=()=>{this.event.off(this.event.CONTANTS.LOGIN_SUCCESS,this.resetUserInfo)},this.getStrategyParamMap=e=>{var t;return null==(t=n.ABTestUtil.getGroupStrategy(y[0],e))?void 0:t.param},this.sceneList=y,this.userInfo={},this.event.on(this.event.CONTANTS.LOGIN_SUCCESS,this.resetUserInfo)}static register(e){const t=new d("abTest",e);return e.addModule(t),t}init(e){this.userInfo=Object.assign(this.userInfo,e),n.ABTestUtil.init({sceneList:this.sceneList,requestABStrategy:this.requestABStrategy,reportTargetToCat:this.reportTargetToCat,codeLogError:this.codeLogError,getUserInfo:this.getUserInfo})}};