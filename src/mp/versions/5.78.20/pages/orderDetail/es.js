var e=Object.create,r=Object.defineProperty,t=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,d=Object.getPrototypeOf,a=Object.prototype.hasOwnProperty,n=n=>{return((e,d,n)=>{if(d&&"object"==typeof d||"function"==typeof d)for(let l of o(d))a.call(e,l)||"default"===l||r(e,l,{get:()=>d[l],enumerable:!(n=t(d,l))||n.enumerable});return e})((l=r(null!=n?e(d(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0}),r(l,"__esModule",{value:!0})),n);var l},l=n(require("../../ob.js")),s=n(require("./p9.js")),i=require("./g5.js"),c=getApp(),u="<SelfLiftQRPopup>";Component(new class{constructor(){this.methods={getOrderQRCode(e){return r=this,t=null,o=function*(){const{orderId:r}=this.data;if(!r)return void l.log.warn(u,"[getOrderQRCode] orderId为空");let t="请凭二维码提货",o="",d="";try{if(this.setData({loading:!0}),l.log.info(u,`[getOrderQRCode] 开始获取加密订单号${r}`),o=yield c.$order.getEncryptedOrderId(r,!1),o){const{url:e}=yield s.getQRCode({qrcode:o});e?(l.log.info(u,`[getOrderQRCode] 获取到了订单 ${r} 的二维码为 ${e}`),d=e):l.log.warn(u,"[getOrderQRCode] 没有获取到绘制的二维码，开始本地绘制",o)}else l.log.warn(u,`[getOrderQRCode] 订单 ${r} 的加密二维码没有获取到呀~`),t="二维码加载失败，请点击刷新",e&&c.page().toast("刷新失败，请重试")}catch(e){l.log.warn(u,`[getOrderQRCode] 请求订单 ${r} 的二维码接口失败了！`,e),t="二维码加载失败，请点击刷新"}finally{this.setData({loading:!1,title:t,encryptedOrderId:o,qrcodeUrl:d},(()=>{o&&!d&&this.drawQRCode(o)}))}},new Promise(((e,d)=>{var a=e=>{try{l(o.next(e))}catch(e){d(e)}},n=e=>{try{l(o.throw(e))}catch(e){d(e)}},l=r=>r.done?e(r.value):Promise.resolve(r.value).then(a,n);l((o=o.apply(r,t)).next())}));var r,t,o},drawQRCode(e){i.qrcode("popupQrCode",e,480,480,this)},onQrcodeClose(){this.triggerEvent("close")},noop(){}},this.properties={show:{type:Boolean,value:!1,observer(e){e&&!this.data.encryptedOrderId&&this.getOrderQRCode()}},orderId:{type:String,value:""}},this.data={loading:!0,title:"请凭二维码提货",encryptedOrderId:"",qrcodeUrl:""}}ready(){}});